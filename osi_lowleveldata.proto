syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi;

//
// \brief Interface for low level sensor data, in contrast to high level data after object hypothesis and tracking.
//
// All information regarding the environment is given with respect to the sensor coordinate system specified in \c LowLevelData::mounting_position. 
// When simulating multiple sensors, each sensor has an individual copy of LowLevelData in its own reference frame. This allows an independent treatment of the sensors.
//
 message LowLevelData
 {
     // Lidar detection list for multiple lidar sensors.
     //
     repeated DetectionLidarList detection_lidar_list = 4;

     // Radar detection list for multiple lidar sensors.
     //
     repeated DetectionRadarList detection_radar_list = 5;
}

//
// \brief The header attributes of each detection.
//
message DetectionHeader
{
   // Version number of detecion list messages.
   // 
   optional uint64 version = 1;
    
   // Time stamp at which the measurement was taken (not the time at which it was processed or at which it is transmitted) in the global synchronized time. 
   //
   optional Timestamp timestamp = 2;
    
   // Continuous up counter to identify the cycle.
   //
   optional uint32 cylcle_counter = 3;

   // Mounting position of the sensor (origin and orientation of the sensor coordinate system);
   // given relative to the middle of the rear axis of the host vehicle.
   // The detections are given in the detection coordinate system. 
   // The x-axis must be the angle bisector of the horizontal field of view in a right handed coordinate system. The x-y plane represents the horizontal field of view 
   // and the x-z plane the vertical field of view. It is a polar coordinate system for the horizontal field of view with distance and azimuth angle and a Cartesian 
   // representation for the vertical field of view with a z_bottom and a height. 
   //
   // The origin of the detection coordinate system is the sensor mounting pose in the ego coordinate system. The ego coordinate system is at the center of the rear axis 
   // (from the top view as well as from the side view) in the static case. The origin represents the current mounting pose to the best knowledge of the sensor. It 
   // includes the estimated 6-D pose estimation given by the calibration. The uncertainty of this estimation is given with the corresponding 6-D standard deviation. The 
   // estimation of the current origin does not include effects due to short-time dynamics, such as pitch angles from braking, but includes long-time calibration values, 
   // such as pitch angles from luggage in the trunk.
   optional MountingPosition mounting_position = 4;

   // Uncertainty of the mounting pose calibration should be included in the interface (x, y, z, yaw). Uncertainties of pitch and roll are integrated into the uncertainties 
   // of border attributes such as the distance root mean square error and the bottom point root mean square error.
   optional MountingPosition mounting_position_rmse = 5;

   // Data Qualifier expresses whether the content of this event can be used or not.
   //
   optional DataQualifier data_qualifier = 6;

   // \brief Data qualifier communicates the overall availability of the interface.
   enum DataQualifier
   {
       // Data is available.
       //
       DATA_AVAILABLE = 0;
       
       // Reduced data is available.
       //
       DATA_AVAILABLE_REDUCED = 1;
      
       // Data is not available.
       //
       DATA_NOT_AVAILABLE = 2;
   }
}

//
// \brief A list of lidar detection.
//
message DetectionLidarList
{
    // List of lidar detections.
    //
    repeated DetectionLidar detection = 1;
    
   // Header attributes of lidar detection.
   //
   optional DetectionHeader header = 2;
}

//
// \brief A point in a lidar point cloud.
//
message DetectionLidar
{
    // Position of the point.
    //
    optional Vector3d position = 1;

    // Intensity of echo received by sensor associated with the point. 
    // Unit: [W].
    optional double intensity = 2;

    // Estimated type of target that caused the reflection.
    //
    optional ReflectionType reflection_type = 3;

    // The id of the (dynamic) object that caused the reflection (only set for corresponding ReflectionType, unset in other cases).
    //
    optional Identifier reflection_object_id = 4;

    // Echo number of the LidarPoint associated with a specific transmitted laser pulse. 
    // The echo number is 0 if the LidarPoint results from the closest reflection, 1 for the second closest, etc.
    optional uint32 echo = 5;

    // Duration of the echo pulse (above system noise cut-off threshold). 
    // Unit: [ns].
    optional double echo_pulse_duration = 6;
    
    // Layer id starting from zero for the bottom layer of the point cloud.
    //
    optional uint32 layer = 7;

    // Definition of reflection types.
    //
    enum ReflectionType
    {
        // Reflection type is unknown (must not be used in ground truth).
        //
        REFLECTION_TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of reflection.
        //
        REFLECTION_TYPE_OTHER = 1;
        
        // Invalid scan point, not to be used for object tracking, of unspecified type (none of the other types applies).
        //
        REFLECTION_TYPE_INVALID = 2;
        
        // Reflection from dynamic object.
        //
        REFLECTION_TYPE_DYNAMIC_OBJECT = 3;
        
        // Reflection from static object.
        //
        REFLECTION_TYPE_STATIC_OBJECT = 4;
        
        // Reflection from ground.
        //
        REFLECTION_TYPE_GROUND = 5;
        
        // Reflection from road marking.
        //
        REFLECTION_TYPE_ROAD_MARKING = 6;
    }
}

//
// \brief A list of radar detections.
//
message DetectionRadarList
{
    // List of radar detections constituting the radar detection list.
    //
    repeated DetectionRadar detection = 1;
    
   // Header attributes of radar detection.
   //
   optional DetectionHeader header = 2;
}

//
// \brief A radar detection.
//
message DetectionRadar
{
    // The id of the radar reflection.
    //
    optional Identifier id = 1;

    // The position vector of the radar reflection, given in spherical coordinates.
    //
    optional Spherical3d position = 2;

    // The radar cross section (RCS) of the radar reflection. 
    // Unit: [dB sqm].
    optional double rcs = 3;

    // Radial speed of the radar reflection.
    // 
    // \attention Not be confused with the velocity vector! This is the absolute value of the radial component of the velocity
    // vector as can be measured directly using the Doppler effect.
    optional double speed = 4;
}
