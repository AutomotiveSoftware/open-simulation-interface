syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";
import "osi_lane.proto";

package osi;

//
// \brief A lane segment as detected by the sensor.
//
message DetectedLane
{
    // The id of the original lane in the ground truth.
    // Multiple entries if the detected lane is a merge of multiple lanes in ground truth (as lane segment definitions
    // may vary between sensor and ground truth).
    repeated Identifier ground_truth_id = 1;

    // The detected lane.
    //
    optional Lane lane = 2;

    // Estimated probability that this lane really exists. Range [0,1].
    //
    optional double existence_probability = 3;

    // The measurement state of the traffic sign.
    //  
    optional MeasurementStatus measurement_state = 4;

    // Definition of measurement states.
    // 
    enum MeasurementStatus
    {
        // Measurement state is unknown (must not be used in ground truth).
        //
        MEASUREMENT_STATE_UNKNOWN = 0;
        
        // Measurement state is unspecified (but known, i.e. value is not part of this enum list).
        //
        MEASUREMENT_STATE_OTHER = 1;
        
        //Lane has been measured by the sensor in the current timestep.
        //
        MEASUREMENT_STATE_MEASURED = 2;
        
        // Lane has not been measured by the sensor in the current timestep. Values provided by tracking only.
        //
        MEASUREMENT_STATE_PREDICTED = 3;
    }
}

//
// \brief A lane segment as detected by the sensor.
//
message DetectedLaneBoundary
{
    // The id of the original laneboundary in the ground truth.
    // In case of a ghost laneboundary (no corresponding ground truth), this field should be unset.
    optional Identifier ground_truth_id = 1;

    // The lane boundary to which this detection is associated to.
    // 
    optional LaneBoundary laneboundary = 2;

    // Status of the measurement. Lane boundary measured in the current image or Lane boundary predicted (no measurement in current image)
    // 
    optional MeasurementStatus lane_measurement_status = 3;

    // Probability of the detection that the lane exists.
    // 
    optional double existence_probability = 4;

    // Confidence of the classified lane boundary type.
    // 
    optional double type_confidence = 5;

    // Confidence of the classified lane marker color.
    // 
    optional double color_confidence = 6;

    // The root mean square error of the BoundaryPoint information from a LaneBoundary.
    // 
    repeated BoundaryPoint boundary_line_rmse = 7;

    // Confidence of the segments of the BoundaryPoint information from a LaneBoundary.
    // 
    repeated double boundary_line_confidence = 8;

    // Definition of measurement states.
    // 
    enum MeasurementStatus
    {
        // Measurement state is unknown (must not be used in ground truth).
        //
        MEASUREMENT_STATE_UNKNOWN = 0;
        
        // Measurement state is unspecified (but known, i.e. value is not part of this enum list).
        //
        MEASUREMENT_STATE_OTHER = 1;
        
        //Lane has been measured by the sensor in the current timestep.
        //
        MEASUREMENT_STATE_MEASURED = 2;
        
        // Lane has not been measured by the sensor in the current timestep. Values provided by tracking only.
        //
        MEASUREMENT_STATE_PREDICTED = 3;
    }
}

