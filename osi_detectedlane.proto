syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";
import "osi_lane.proto";
import "osi_detectedobject.proto";

package osi;

//
// \brief A lane segment as detected by the sensor.
//
message DetectedLane
{
    // Specific ID of the detected lane as assigned by the sensor internally.
    // Need not match with \c #ground_truth_id_list IDs.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original lane in the ground truth.
    // Multiple entries if the detected lane is a merge of multiple lanes in
    // ground truth (as lane segment definitions may vary between sensor and
    // ground truth).
    //
    repeated Identifier ground_truth_id_list = 3;

    // The amount of time that this detected object has been currently 
    // observed/tracked.
    // 
    // Unit: [s]
    //
    optional double age = 1000;
    
    // The measurement state of the detected object.
    //
    optional MeasurementState measurement_state = 1001;
    
    // The detected lane.
    //
    optional Lane lane = 4;

    // The estimated probability that this lane really exists, not based on
    // history.
    //
    // \note Use as confidence measure where a low value means less confidence
    // and a high value indicates strong confidence.
    //
    optional double existence_probability = 5;
   
    // A list of sensors which detected this detected entity.
    //
    // If \c SensorData has detected entities and all detections are missing,
    // then e.g. the number of sensors can confirm the
    // \c #existence_probability.
    // 
    // \note This information can be determined via the detected entities'
    // detections ( \c ...Detection::object_id = 'this detected entity' ) and
    // the sensors (their IDs) to which these detections belong.
    //
    repeated Identifier sensor_id_list = 6;    
}

//
// \brief A lane segment as detected by the sensor.
//
message DetectedLaneBoundary
{
    // Specific ID of the detected lane boundary as assigned by the sensor
    // internally. Need not match with \c #ground_truth_id.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original \c LaneBoundary in the ground truth.
    //
    // \note In case of a ghost \c LaneBoundary (no corresponding ground truth),
    // this field should be unset.
    //
    optional Identifier ground_truth_id = 3;

    // The amount of time that this detected object has been currently 
    // observed/tracked.
    // 
    // Unit: [s]
    //
    optional double age = 1000;

    // State of the measurement. Lane boundary measured in the current image or
    // lane boundary predicted (no measurement in current image).
    //
    optional MeasurementState measurement_state = 5;

    // The basic measured lane boundary.
    //
    optional LaneBoundary lane_boundary = 4;

    // The estimated probability that this lane boundary really exists, not
    // based on history.
    //
    // \note Use as confidence measure where a low value means less confidence
    // and a high value indicates strong confidence.
    //
    optional double existence_probability = 6;

    // Confidence of the classified lane boundary type.
    //
    optional double type_confidence = 7;

    // Confidence of the classified lane marker color.
    //
    optional double color_confidence = 8;

    // The root mean squared error of the \c BoundaryPoint information from a 
    // \c LaneBoundary.
    // For each \c #lane_boundary \c LaneBoundary::boundary_line point exact
    // one \c #boundary_line_points_rmse rmse information exist.
    //
    repeated BoundaryPoint boundary_line_points_rmse = 9;

    // Confidence of the segments of the \c BoundaryPoint information from a 
    // \c LaneBoundary.
    // For each \c #lane_boundary \c LaneBoundary::boundary_line point exact
    // one \c #boundary_line_points_confidences confidence value is specified.
    //
    repeated double boundary_line_points_confidences = 10;
   
    // A list of sensors which detected this detected entity.
    //
    // If \c SensorData has detected entities and all detections are missing,
    // then e.g. the number of sensors can confirm the 
    // \c #existence_probability.
    // 
    // \note This information can be determined via the detected entities'
    // detections ( \c ...Detection::object_id = 'this detected entity' ) and
    // the sensors (their IDs) to which these detections belong.
    //
    repeated Identifier sensor_id_list = 11;    
}
